# gcc-i686-c is used for bootstrapping glibc-i686 and gcc-i686:
# 1. build gcc-i686-host
# 2. build glibc-i686-host using gcc-i686-host
# 3. build gcc-i686-c using glibc-i686-host
# 4. build glibc-i686 using gcc-i686-c
# 5. build gcc-i686 using glibc-i686

source: "distri+source://gcc"
hash: "71e197867611f6054aa1119b13a0c0abac12834765fe2d81f35ac57f84f742d1"
version: "9.3.0-6"

writable_sourcedir: true  # generate files in /usr/src (included in src squashfs)

# cbuilder: <
#   extra_configure_flag: "--disable-multilib" # TODO: fix multilib (requires 32-bit libc+headers)
#   extra_configure_flag: "--enable-languages=c,c++" # skip fortran etc. for now
# >

dep: "bash"
dep: "coreutils"
dep: "sed"
dep: "grep"
dep: "gawk"
dep: "diffutils"
dep: "file"

# C build environment:
dep: "gcc"
dep: "binutils-i686-amd64"  # for the target, listed first so that the wrapper script prefers it
dep: "binutils"  # for the host
dep: "make"
dep: "glibc"
dep: "glibc-i686-host"
dep: "linux"
dep: "findutils"  # find(1) is used by libtool, build of e.g. libidn2 will fail if not present
dep: "patchelf"

# build dependencies:
dep: "gmp"
dep: "mpfr"
dep: "mpc"
dep: "tar"

# kludge: the C++ header cstdlib uses the #include_next pragma, which requires
# that /ro/glibc-amd64-2.27/out/include comes _after_ the g++ includes. This
# requires /ro/glibc-amd64-2.27/out/include to be a system include, which we
# achieve by symlinking /usr/include to it.
build_step: {
  argv: "rm"
  argv: "/usr/include"
}
build_step: {
  argv: "ln"
  argv: "-s"
  argv: "/ro/${DISTRI_RESOLVE:glibc}/out/include"
  argv: "/usr/include"
}
# TODO: the g++ search path needs to be changed.
# print the search path using “echo | cpp -xc++ -Wp,-v”
# the search path is persisted in gcc/cppdefault.c

build_step: {
  argv: "${DISTRI_SOURCEDIR}/configure"
  argv: "--prefix=${DISTRI_PREFIX}"
  argv: "--disable-multilib"  # TODO: fix multilib (requires 32-bit libc+headers)
  argv: "--target=i686-pc-linux-gnu"
  # argv: "--with-stage1-ldflags=-static"
  # argv: "--with-boot-ldflags=-static"
  argv: "--enable-languages=c,c++"
}

build_step: {
  argv: "make"
  argv: "-j${DISTRI_JOBS}"
  argv: "all-host"
  argv: "V=1"
}

# kludge: gcc’s build system assumes that you install the glibc startup files
# and libc.so to the same directory as gcc’s --prefix points to. Because the
# build system uses the -B flag, LIBRARY_PATH isn’t respected, and hence we need
# to copy the files into the build directory manually:
build_step: {
  argv: "/bin/sh"
  argv: "-c"
  argv: "CPATH=/ro/${DISTRI_RESOLVE:glibc-i686-host}/out/i686-pc-linux-gnu/include:$CPATH LIBRARY_PATH=/ro/${DISTRI_RESOLVE:glibc-i686-host}/out/i686-pc-linux-gnu/lib:$LIBRARY_PATH make -j${DISTRI_JOBS} all-target-libgcc V=1; true"
}
build_step: {
  argv: "/bin/sh"
  argv: "-c"
  argv: "cp /ro/${DISTRI_RESOLVE:glibc-i686-host}/out/i686-pc-linux-gnu/lib/* i686-pc-linux-gnu/libgcc/"
}
build_step: {
  argv: "/bin/sh"
  argv: "-c"
  argv: "CPATH=/ro/${DISTRI_RESOLVE:glibc-i686-host}/out/i686-pc-linux-gnu/include:$CPATH LIBRARY_PATH=/ro/${DISTRI_RESOLVE:glibc-i686-host}/out/i686-pc-linux-gnu/lib:$LIBRARY_PATH make -j${DISTRI_JOBS} all-target-libgcc V=1"
}

build_step: {
  argv: "make"
  argv: "-j${DISTRI_JOBS}"
  argv: "install-host"
  argv: "install-target-libgcc"
  argv: "DESTDIR=${DISTRI_DESTDIR}"
}
