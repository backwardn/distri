# distri building
:toc: left
:toclevels: 4
:sectnums:

This document describes building distri packages.

For more details on what distri packages are, see
link:package-format.html[package format].

## use-cases

To build a single package, use e.g. `distri build -pkg i3status`. For
convenience, if you are working in a package directory
(e.g. `distri/pkgs/i3status`), you can just run `distri build`, or even
just `distri`, and the tool will infer your intention.

Once you are happy with your change to the package, use e.g. `distri bump
i3status` to display which packages need to have their version number increased
when changing the `i3status` package. Use the `-w` flag to actually change the
affected packages.

To build *all* distri packages, use `distri batch`.

## build instructions

The package build instructions are declared in a file called
`build.textproto`, for example:

.pkgs/i3status/build.textproto
--------------------------------------------------------------------------------
source: "https://i3wm.org/i3status/i3status-2.13.tar.bz2"
hash: "ce89c9ff8565f62e88299f1a611229afdfc356b4e97368a5f8c4f06ad2fa1466"
version: "2.13-5"

cbuilder: <>

# build dependencies:
dep: "confuse"
dep: "yajl2"
dep: "alsa-lib"
dep: "libnl"
dep: "pulseaudio"
dep: "which"
dep: "asciidoc"
dep: "xmlto"
dep: "docbook-xsl"

install: <
  capability: <
    filename: "bin/i3status"
    capability: "cap_net_admin=ep"
  >
>
--------------------------------------------------------------------------------

TIP: The corresponding https://developers.google.com/protocol-buffers/[Protocol
Buffers] definition file is
https://github.com/distr1/distri/blob/master/pb/build.proto[build.proto].

The following sections cover the available directives.

### upstream

source (string)::

A https URL to the upstream archive that should be built.

hash (string)::

A SHA256 hash of the upstream archive, for verifying integrity.

version (string)::

The version number of this package, in format
`<upstream-version>-<distri-revision>`, e.g. `2.12-4`. The distri package
revision is a monotonically increasing number (even when the upstream version
changes!).
+
The name of the package is the directory which contains `build.textproto`, and
the resulting package will be named `<package-name>-<version>`, so a full
package can be referenced by e.g. `i3status-amd64-2.12-4`.

extra_file (repeated string)::

The filename of a file (relative to the directory containing `build.textproto`)
to copy into the source directory as-is. Could also be achieved by using
`cherry_pick`, but files are a little bit easier to maintain this way.

cherry_pick (repeated string)::

The filename of a patch (relative to the directory containing `build.textproto`)
to apply after extracting the upstream archive. The order of directives is the
order in which the patches are applied.

### builder

dep (repeated string)::

Additional build dependencies over what the chosen builder requires.
+
.Example:
--------------------------------------------------------------------------------
dep: "bison"
--------------------------------------------------------------------------------

build_step (repeated)::

Overwrites the chosen builder’s default build steps.

+
--
argv (repeated string):::

argv to pass to https://manpages.debian.org/execve.2[`execve(2)`]

--
+

.Example:
--------------------------------------------------------------------------------
build_step: <
  argv: "/bin/sh"
  argv: "-c"
  argv: "TODO"
>
--------------------------------------------------------------------------------

#### cbuilder

The cbuilder builds autoconf (or compatible) projects.

extra_configure_flag (repeated string)::

Additional flag to pass to `configure`.
+
.Example (from ncurses):
--------------------------------------------------------------------------------
cbuilder: <
  extra_configure_flag: "--disable-stripping"
  extra_configure_flag: "--enable-pc-files"
>
--------------------------------------------------------------------------------

copy_to_builddir (bool)::

Enable if this package does not support building from a separate directory
(sometimes called “out-of-tree build”). A bug should be reported with the
package upstream.

extra_make_flag (repeated string)::

Additional flag to pass to https://manpages.debian.org/make.1[`make(1)`].
+
.Example (from glibc):
--------------------------------------------------------------------------------
cbuilder: <
  extra_make_flag: "user-defined-trusted-dirs=/ro/lib"
>
--------------------------------------------------------------------------------

autoreconf (bool)::

Whether to run https://manpages.debian.org/autoreconf.1[`autoreconf(1)`].

extra_ldflag (repeated string)::

Additional flag to append to the `LDFLAGS` environment variable when building.
+
.Example:
--------------------------------------------------------------------------------
TODO: add an example once we know of good use-cases
--------------------------------------------------------------------------------

#### cmakebuilder

The cmakebuilder builds CMake projects.

extra_cmake_flag (repeated string)::

Additional flag to pass to https://manpages.debian.org/cmake.1[`cmake(1)`].
+
.Example (from kicad):
--------------------------------------------------------------------------------
cmakebuilder: <
  extra_cmake_flag: "-DKICAD_SCRIPTING_WXPYTHON_PHOENIX:BOOL=true"
>
--------------------------------------------------------------------------------

#### mesonbuilder

The mesonbuilder builds meson projects.

extra_meson_flag (repeated string)::

Additional flag to pass to https://manpages.debian.org/meson.1[`meson(1)`].
+
.Example (from accountsservice):
--------------------------------------------------------------------------------
cmakebuilder: <
  extra_meson_flag: "-Dsystemdsystemunitdir=${DISTRI_PREFIX}/lib/systemd/system"
>
--------------------------------------------------------------------------------

#### perlbuilder

The perlbuilder builds Perl projects.

extra_makefile_flag (repeated string)::

Additional flag to pass to `perl Makefile.PL`.
+
.Example (from perl-XML-Parser):
--------------------------------------------------------------------------------
perlbuilder: <
  extra_makefile_flag: "EXPATLIBPATH=/ro/expat-2.2.6/out/lib"
>
--------------------------------------------------------------------------------

#### pythonbuilder

The pythonbuilder builds Python projects.

#### gomodbuilder

#### gobuilder

The gobuilder builds Go projects.

install (string)::

Additional flags to pass to “go install”.
+
.Example (from distri1):
--------------------------------------------------------------------------------
gobuilder: <
  install: "./cmd/distri"
>
--------------------------------------------------------------------------------

import_path (string)::

Import path of the package that is being built. Derived from the source URL by
default; should usually not be specified.
+
.Example (from distri1):
--------------------------------------------------------------------------------
gobuilder: <
  import_path: "distri1"
>
--------------------------------------------------------------------------------

go_env (repeated string)::

Additional go environment variable to set when calling e.g. “go install”.
+
.Example (from distri1):
--------------------------------------------------------------------------------
gobuilder: <
  # Used as /init before the dynamic linker is available:
  go_env: "CGO_ENABLED=0"
>
--------------------------------------------------------------------------------

### package building

runtime_dep (repeated string)::

Additional run-time dependencies which are not automatically found (see <<runtimedeps>>).
+
.Example (from bison):
--------------------------------------------------------------------------------
runtime_dep: "m4"
--------------------------------------------------------------------------------

[[install]]
install::

Additional steps to perform after the build completed.

systemd_unit (repeated string):::

Path to a systemd unit file which the build steps don’t install.
+
.Example (from containerd):
--------------------------------------------------------------------------------
install: <
  systemd_unit: "${DISTRI_SOURCEDIR}/containerd.service"
>
--------------------------------------------------------------------------------

symlink (repeated):::

Create a symbolic link.
+
The nomenclature comes from https://golang.org/pkg/os/#Symlink[Go’s `os.Symlink()`].

+
--
oldname::::
The symbolic link target.

newname::::
The name of the symbolic link to create.
--
+

.Example (from bash):
--------------------------------------------------------------------------------
install: <
  symlink: < oldname: "bash" newname: "bin/sh" >
>
--------------------------------------------------------------------------------

empty_dir (repeated string):::

Create an empty directory with the specified name, relative to
`${DISTRI_PREFIX}/out`.
+
.Example (from irssi):
--------------------------------------------------------------------------------
install: <
  empty_dir: "lib/irssi/modules"
>
--------------------------------------------------------------------------------


chmod (repeated):::

Change the mode of a file.

+
--
setuid (bool)::::

Whether to set the setuid bit.

name (string)::::

The filename of the file whose mode to change, relative to
`${DISTRI_PREFIX}/out`.
--
+

.Example (from pam):
--------------------------------------------------------------------------------
install: <
  chmod: <
    setuid: true
    name: "sbin/unix_chkpwd"
  >
>
--------------------------------------------------------------------------------


capability (repeated):::

Apply a file-based capability

+
--
capability (string)::::

The capability to apply, specified in
https://manpages.debian.org/cap_from_text.3[`cap_from_text(3)`] format.

filename (string)::::

The filename of the file onto which the capability should be applied, relative
to `${DISTRI_PREFIX}/out`.

--
+

.Example (from mtr):
--------------------------------------------------------------------------------
install: <
  capability: <
    filename: "sbin/mtr-packet"
    capability: "cap_net_raw+ep"
  >
>
--------------------------------------------------------------------------------

file (repeated):::

Install a file.

+
--

srcpath (string)::::

The filename of the file to install.

destpath (string)::::

The destination path, relative to `${DISTRI_PREFIX}/out`.

--
+

.Example (from lightdm):
--------------------------------------------------------------------------------
install: <
  file: <
    srcpath: "lightdm.sysusers"
    destpath: "lib/sysusers.d/lightdm.conf"
  >
>
--------------------------------------------------------------------------------

rename (repeated):::

Rename an installed file.

+
--

oldname (string)::::

The filename of the file to rename, relative to `${DISTRI_PREFIX}/out`.

newname (string)::::

The new name, relative to `${DISTRI_PREFIX}/out`.

--
+

.Example (from curl-gnutls):
--------------------------------------------------------------------------------
install: <
  rename: <
    oldname: "lib/libcurl.so.4.5.0"
    newname: "lib/libcurl-gnutls.so.4.5.0"
  >
>
--------------------------------------------------------------------------------

delete (repeated string):::

Delete a file with the specified name, relative to `${DISTRI_PREFIX}/out`.
+
.Example (from curl-gnutls):
--------------------------------------------------------------------------------
install: <
  # This package is provided for compatibility with closed-source
  # software that links against libcurl-gnutls.so, so there will
  # not be any static linking.
  delete: "lib/libcurl.a"
  delete: "lib/libcurl.la"
  delete: "lib/pkgconfig/libcurl.pc"
  delete: "share/aclocal/libcurl.m4"
  delete: "lib/libcurl.so"
  delete: "lib/libcurl.so.4"
>
--------------------------------------------------------------------------------

split_package (repeated)::

Split files out of the resulting package into separate packages. This feature
should be used sparingly: prefer sticking to the mental model that one package
build instruction file results in one distri package.
+
Use cases include fine grained dependencies (e.g. `gcc-libs` split out of `gcc`)
or breaking dependency cycles for bootstrap packages (e.g. `libudev` split out
of `systemd`).

+
--

name (string):::

Name of the split package.

claim (repeated):::

A claim specifies which files this split package claims for itself.

glob (string)::::

glob pattern, interpreted by Go’s
https://golang.org/pkg/path/filepath/#Glob[filepath.Glob]

dir (string)::::

Overwrite the destination directory within the split package.

--
+

.Example (from gcc):
--------------------------------------------------------------------------------
split_package: <
  name: "gcc-libs"
  claim: < glob: "out/lib64/libgcc_s.so*" >
  claim: < glob: "out/lib64/libstdc++.so*" >
  claim: < glob: "out/lib64/libgomp.so*" >
  claim: <
    glob: "out/lib/gcc/x86_64-pc-linux-gnu/8.2.0/crt*.o"
    dir: "out/lib64"
  >
>
--------------------------------------------------------------------------------

runtime_dep (repeated string):::

Additional run-time dependencies which are not automatically found, for this
split package.

runtime_union (repeated)::

Runtime union directories are used to implement per-package exchange directories
(as opposed to global exchange directories). This is to be used for tight
coupling situations, e.g. when a plugin mechanism does not guarantee ABI
compatibility across versions.

+
--

dir (string):::

Directory (within the package) to overlay on top of pkg.

pkg (string):::

distri package on top of which to overlay our files.

--
+

.Example (from irssi-robustirc):
--------------------------------------------------------------------------------
runtime_union: <
  dir: "lib/irssi/modules"
  pkg: "irssi"
>
--------------------------------------------------------------------------------


## build process

When running `distri build`, the following directories are involved:

TIP: run `distri env` to resolve e.g. `$DISTRIROOT`

PkgDir::

The directory containing `build.textproto`, e.g. `$DISTRIROOT/pkgs/i3status`.

SourceDir::

Path of the extracted sources, e.g. `$DISTRIROOT/build/i3status/i3status-2.13`.

DestDir::

A directory named "tmp" within a temporary directory,
e.g. `/tmp/distri-dest-3129384/tmp`. This directory is mounted at `/dest/tmp` in
the namespace. TODO: why the tmp subdirectory instead of just installing to
/dest or just destdir?
+
Within DestDir, `ro/lib` and `ro/share` are symbolic links to
`${DISTRI_PREFIX}/lib` and `${DISTRI_PREFIX}/share`, respectively.  This allows
packages to install files into exchange directories such as
e.g. `--datadir=/ro/share`.

ChrootDir::

A temporary directory providing the file system root for the build subprocess,
e.g. `/tmp/distri-buildchroot-1938422`.

BuildDir::

A temporary directory created in ChrootDir (TODO). The build steps will be run
in this directory.

At a high level, the following steps are performed:

1. The sources are downloaded, verified and extracted.
2. The software is built.
3. The package (SquashFS image and accompanying metadata) is created.

### download

The specified `source` is downloaded to SourceDir/.., provided its SHA256 hash
matches `hash`. If the file already exists, no network connectivity is needed
for building.

Then, the `source` archive is extracted.

NOTE: distri assumes that the source archive contains a directory named like the
archive after stripping file extensions. E.g., i3status’s `i3status-2.13.tar.gz`
should contain a directory called `i3status-2.13`.

### build

The following build environment is created in ChrootDir:

[options="header"]
|===
| Path | Contents
| `/dev/null` | device node
| `/etc/passwd` | minimal passwd file containing the build user
| `/etc/group` | minimal group file containing the build group
| `/usr/src/<pkg>-<arch>-<version>` | SourceDir (e.g. `$DISTRIROOT/build/i3status/i3status-2.13`)
| `/usr/src/wrappers` | PkgDir/wrappers (e.g. `$DISTRIROOT/pkgs/ssh/wrappers`)
| `/ro` | distri packages declared as build dependencies
| `/dest/tmp` | DestDir (e.g. `/tmp/distri-dest-3129384/tmp`)
| `/dest/tmp/ro/share` | symlink to `$DESTDIR/ro/i3status-amd64-2.13-3/out/share`
| `/dest/tmp/ro/lib` | symlink to `$DESTDIR/ro/i3status-amd64-2.13-3/out/lib`
| `/lib64` | symlink to `/ro/glibc-amd64-2.27-3/out/lib`
| `/usr/include` | symlink to `/ro/include`
| `/bin` | symlink to `/ro/bin`
| `/sbin` | symlink to `/ro/bin`
| `/usr/bin` | symlink to `/ro/bin`
| `/ro` | FUSE mount of `$DISTRIROOT/build/distri/pkg`
|===

Then, a subprocess is started in a separate user and mount https://manpages.debian.org/namespaces.7[namespace]. That subprocess then:

* sets up logging to `build-<version>.log`
* changes its root to ChrootDir
* changes its working directory to BuildDir
* sets `PATH=/bin`

before performing the following actions:

#### build steps

Builders (e.g. the C builder, or Perl builder) supply the default build steps:

* For C, the default steps amount to `configure`, `make`, `make install`.
* For Perl, the default steps amount to `perl Makefile.PL`, `make`, `make install`.
* etc.

For odd packages which do not adhere to the standard conventions of whichever ecosystem they live in (e.g. `libcap`), the preferred course of action is to convince upstream to change that. In the meantime, custom build steps can be defined in the build instructions, overwriting the builder default build steps.

[[substitutions]]
The following variables will be substituted in build steps:

[options="header"]
|===
| Variable | Usage | Example Value
| `${DISTRI_DESTDIR}` | `DESTDIR` | `/dest/tmp`
| `${DISTRI_PREFIX}` | `--prefix` | `/ro/i3status-amd64-2.13-3/out`
| `${DISTRI_BUILDDIR}` | build directory | `/tmp/distri-build511672173`
| `${DISTRI_SOURCEDIR}` | source directory | `/usr/src/i3status-amd64-2.13-3`
| `${DISTRI_FULLNAME}` | distri package name | `i3status-amd64-2.13-3`
| `${DISTRI_RESOLVE:<pkg>}` | resolves build dependency `<pkg>`
| `${DISTRI_RESOLVE:lvm2}` = +
`lvm2-amd64-2.03.00-5`
|===

Each build step is run with the following environment variables:

[options="header"]
|===
| Environment Variable | Contents | Consumer
| `PATH`
a|
[unstyled]
* `/ro/bin`
* `/bin`
| shell, https://manpages.debian.org/execl.3[`execlp(3)`] and similar
| `PKG_CONFIG_PATH`
a|
[unstyled]
* `$deps/lib/pkgconfig`
| pkg-config
| `LDFLAGS`
a|
[unstyled]
* `-Wl,-rpath=$deps/lib`
* `-Wl,-dynamic-linker=TODO`
* extra_ldflag
| gcc
| `CPATH`
a|
[unstyled]
* `$deps/include`
* `$deps/include/x86_64-linux-gnu`
| gcc (for libraries without pkg-config)
| `LIBRARY_PATH`
a|
[unstyled]
* `$deps/lib`
* `$deps/lib64`
| gcc (for libraries without pkg-config)
| `LD_LIBRARY_PATH`
a|
[unstyled]
* `$deps/lib`
* `$deps/lib64`
| ld
| `PERL5LIB`
a|
[unstyled]
* `$deps/lib/perl5`
| perl
| `PYTHONPATH`
a|
[unstyled]
* `$deps/lib/python*/site-packages`
| python
|===

The `$deps` notation means the following path is appended to the `out` directory of all build dependencies. E.g., for a package with build dependencies `bison` and `libx11`, `PKG_CONFIG_PATH` is `/ro/bison-3.0.5/out/lib/pkgconfig:/ro/libx11-1.6.6/out/lib/pkgconfig`.

TODO: can we remove LD_LIBRARY_PATH? should only be required for libraries which don’t set their rpath correctly

TODO: is PERL5LIB required? if so, also PYTHON etc.?

#### instructions

The install build instructions are processed and any post-build installation
instructions (see <<install>>) are processed.

#### wrapper scripts

** TODO: why does this happen here as opposed to elsewhere?

** create wrapper scripts for files in bin, sbin

#### run-time dependencies [[runtimedeps]]

NOTE: For the following techniques to work, the package is made available at its
destination path `/ro/<pkg>-<arch>-<version>` (e.g. `/ro/i3status-amd64-2.13-3`).

The following run-time dependencies are automatically found:

* packages needed by dynamically linked ELF objects (binaries and libraries), found by running `ldd(1)`
* build dependencies, e.g. the Perl builder promotes all build dependencies to run-time dependencies
* packages referenced by `Requires:` or `Requires.private:` lines in installed pkg-config files (`.pc`)

### package creation

All library dependencies are symlinked into `lib` (which is placed in the
`rpath` of ELF executables).

The auto-detected and specified run-time dependencies are now persisted into
`<pkg>-<arch>-<version>.meta.textproto`,
e.g. `i3status-amd64-2.13-3.meta.textproto`.

A SquashFS image is created from `DestDir/<pkg>-<arch>-<version>`,
e.g. `i3status-amd64-2.13-3.squashfs` is created from
`DestDir/i3status-amd64-2.13-3`.

* move b.DestDir/tmp/ro/hello-1 to b.DestDir/hello-1 (TODO: why?)
* move b.DestDir/tmp/etc to b.DestDir/hello-1/etc (TODO: why?)
* pkg()
** create ../distri/pkg/<pkg>-<version>.squashfs from b.DestDir/hello-1
